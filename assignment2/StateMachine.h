#ifndef _STATEMACHINE_H_
#define _STATEMACHINE_H_
#include <ctype.h>
#include <cstdio>
#include <string>
#include "Token.h"

enum MachineState {
/*
	START_STATE, SEMICOLON_STATE, LESS_STATE, INSERTION_STATE, LESSEQUAL_STATE,
	MINUS_STATE, DIVIDE_STATE,
	 
	COMMENT_STATE, BLOCKCOMMENT1_STATE, BLOCKCOMMENT2_STATE,
	TIMES_STATE, PLUS_STATE, GREATER_STATE, OUTSTREAM_STATE, GREATEREQUAL_STATE, EQUAL_STATE, 
	
	NOTEQUAL1_STATE, NOTEQUAL2_STATE, 
	LPAREN_STATE, RPAREN_STATE, LCURLY_STATE, RCURLY_STATE, INDENTIFIER_STATE, INTEGER_STATE,
	ENDFILE_STATE, CANTMOVE_STATE, LAST_STATE
*/
	START_STATE, /*NOT_STATE,*/ IDENTIFIER_STATE, INTEGER_STATE, CANTMOVE_STATE,
	LESSEQUAL_STATE, LESS_STATE, INSERTION_STATE, LPAREN_STATE, RPAREN_STATE, 
	SEMICOLIN_STATE, PLUS_STATE, LCURLY_STATE, RCURLY_STATE,
	GREATER_STATE, GREATEREQUAL_STATE, EQUAL_STATE, ASSIGNMENT_STATE,
	MINUS_STATE, TIMES_STATE, DIVIDE_STATE, COLIN_STATE,
	BAD_STATE,EOF_STATE, /*NOTEQUAL_STATE,*/ COMMENT_STATE, UNCOMMENT_STATE,
	LINECOMMENT_STATE, NCOMMENT_STATE, EXPONENT_STATE, 
	AND_STATE, OR_STATE, PAND_STATE, POR_STATE, ENDLINE_STATE, 
	PEQUAL_STATE, MEQUAL_STATE, TEQUAL_STATE, LAST_STATE,
};

enum CharacterType {
/*
	LETTER_CHAR, DIGIT_CHAR, TABWHITESPACE_CHAR, RETURN_CHAR,
	PLUS_CHAR, MINUS_CHAR, DIVIDE_CHAR, TIMES_CHAR, BAD_CHAR,
	LESS_CHAR, GREATER_CHAR, EXCLAMATION_CHAR,
	LCURLY_CHAR, RCURLY_CHAR, LPAREN_CHAR, RPAREN_CHAR,
	SEMICOLIN_CHAR, EQUAL_CHAR, 
	UNDERSCORE_CHAR, LAST_CHAR
*/
	/*NOT_CHAR,*/ LETTER_CHAR, DIGIT_CHAR, WHITESPACE_CHAR, PLUS_CHAR, 
	TIMES_CHAR, MINUS_CHAR, DIVIDE_CHAR, SEMICOLIN_CHAR, LESS_CHAR, GREATER_CHAR,
	LPAREN_CHAR, RPAREN_CHAR, LCURLY_CHAR, RCURLY_CHAR, EQUAL_CHAR, COLIN_CHAR,
	BAD_CHAR, EOF_CHAR, 
	AND_CHAR, OR_CHAR, ENDLINE_CHAR, 
	LAST_CHAR,
};

class StateMachineClass
{
	private:
		MachineState mCurrentState;
		// The matrix of legal moves:
		MachineState mLegalMoves[LAST_STATE][LAST_CHAR];
		// Which end-machine-states correspond to which token types.
		// (non end states correspond to the BAD_TOKEN token type)
		TokenType mCorrespondingTokenTypes[LAST_STATE];
	public:
		StateMachineClass();
		MachineState UpdateState(char currentCharacter, TokenType & correspondingTokenType);
		void PrintMlegalMoves();
		void ResetCurrentState();


};



#endif // STATE
